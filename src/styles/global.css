/* 
  Global styles 
  Low-specificity, global styles that apply to the whole 
  project: https://cube.fyi/css.html
*/

@view-transition {
  /* This is used in conjunction with the code in +layout.svelte */
  navigation: auto;
}

/* This view transition code from https://jakearchibald.com/2024/view-transitions-handling-aspect-ratio-changes/ */

::view-transition-old(heading-1),
::view-transition-new(heading-1) {
  /* Make the text views match the height of their group */
  height: 100%;
  /* Set the other dimension to auto,
     which for images means they maintain their aspect ratio */
  width: auto;
}

::view-transition-group(heading-1) {
  /* Clip the views as they overflow the group */
  overflow: clip;
}

:root {
  view-transition-name: root;
}

body {
  background: var(--body-bg);
  color: var(--color-text);
  font-size: var(--size-step-0);
  font-family: var(--font-base);
  line-height: var(--leading-loose);
  margin: 0;

  /* Position header, main content and footer */
  display: grid;
  grid-template-rows: auto 1fr auto;
  width: 100%;
  height: 100%;
  min-height: 100vh;
  max-width: 100vw;
  overflow-x: hidden;
}

:is(h1, h2, h3, h4) {
  line-height: var(--leading-tight);
  text-wrap: balance;
  margin: 0;
  color: var(--heading-color);
}

h1 {
  line-height: var(--leading-tight);
  font-size: var(--size-step-6);
  max-width: 20ch;
  height: auto;

  font-family: var(--font-decorative);

  /* This isn't quite clean enough to keep */
  /* view-transition-name: heading-1; */
}

h2 {
  font-size: var(--size-step-5);
  max-width: 35ch;
}

h3 {
  font-size: var(--size-step-4);
  max-width: 35ch;
}

:is(h1, h2, h3, h4):where([class*='text-step-10'],
  [class*='text-step-11'],
  [class*='text-step-12']) {
  line-height: var(--leading-tight);
  font-weight: var(--font-black);
}

:is(h4, h5, h6) {
  font-size: var(--size-step-2);
}

a {
  color: inherit;
}

p {
  line-height: var(--leading-loose);
  margin: 0;
  margin-block-start: 1em;
}

small {
  font-size: var(--size-step--1);
}

ins {
  text-decoration: none;
  background: var(--color-primary);
  color: var(--body-bg);
  padding-inline: 0.3em;
}

:is(code, kbd, samp) {
  font-family: var(--font-mono);
  padding: 0.2em 0.2em 0.05em 0.2em;
  hyphens: none;
  tab-size: 2;
  text-align: left;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  box-decoration-break: clone;
}

/* This is quite a new property, so we want code styles to at least, not be huge or tiny */
@supports not (font-size-adjust: from-font) {
  :is(code, kbd, samp) {
    font-size: 0.8em;
  }
}

pre:has(code) {
  width: max-content;
  max-width: 100%;
  overflow-x: auto;
}

pre code {
  border: none;
  background: none;
  padding: 0;
}

kbd {
  border: 1px solid;
  padding-block-end: 0.1em;
}

var {
  font-style: normal;
  font-weight: var(--font-medium);
}

q {
  font-style: italic;
}

ul:not([class]) {
  padding-inline-start: 1.7ch;
  list-style-type: disc;
}

ul:not([class])>li {
  padding-inline-start: var(--space-xs);
}

ul ::marker {
  font-size: 0.8lh;
}

ol ::marker {
  font-size: 1em;
  font-weight: var(--font-bold);
}

/* Lists with classes and roles will be out of standard flow, so remove the default spacing */
[role='list'][class],
[role='tablist'][class] {
  margin-block: 0;
  padding: 0;
}

dt {
  font-weight: var(--font-medium);
}

dt+dd {
  margin-block-start: var(--space-xs);
}

dd+dt {
  margin-block-start: var(--space-s);
}

dd {
  margin-inline-start: 1.5ch;
}

blockquote {
  margin-inline: 0;
  color: var(--color-text);
}

blockquote footer {
  margin-block-start: var(--space-s);
  color: var(--color-text);
  font-size: var(--size-step-0);
}

blockquote q {
  font-style: normal;
}

:is(video, iframe[src*='youtube'], iframe[src*='vimeo']) {
  display: block;
  width: 100%;
  height: auto;
  aspect-ratio: 16/9;
}

img {
  height: auto;
  max-width: 100%;
  display: block;
}

figcaption {
  padding-block-start: 0.5em;
  font-size: var(--size-step-0);
  font-family: monospace;
}

table {
  border: var(--stroke);
  border-collapse: collapse;
  width: 100%;
}

th {
  text-align: left;
  font-weight: var(--font-bold);
  line-height: var(--leading-tight);
}

thead th {
  padding-block: var(--space-s);
}

td,
th {
  padding: var(--space-xs) var(--space-s);
}

th:not(:only-of-type) {
  border-block-end: var(--stroke);
}

th:only-of-type {
  border-inline-end: var(--stroke);
}

:is(th, td)~ :is(th, td) {
  border-inline-start: var(--stroke);
}

tr+tr :is(th, td) {
  border-block-start: var(--stroke);
}

caption {
  caption-side: bottom;
  margin-block-start: var(--space-s);
}

/* If desired, set custom focus styles. I like the browser defaults in most cases */
/* :focus {
  outline: none;
}

:focus-visible {
  outline: 2px solid var(--focus-color, currentColor);
  outline-offset: var(--focus-offset, 0.2lh);
} */

/* Firefox is the only browser that doesn't outline the whole element unless you make it display: inline-block. That in itself causes multiple flow issues so we can detect it, using its own vendor prefix and reduce focus offset
*/
@supports (-moz-appearance: none) {
  :root {
    --focus-offset: 0.08em;
  }
}

:target {
  scroll-margin-block: 5lh;
}

hr {
  border: none;
  border-block-start: var(--hr-stroke, var(--stroke));
  margin-block: var(--flow-space, var(--space-xl));
}

svg:not([class]) {
  width: auto;
  height: 1lh;
}

svg {
  flex-shrink: 0;
}

svg[role='img'][width][height] {
  width: revert;
  height: revert;
  padding: var(--space-xs);
}

form {}

/* There's a .flow composition, but this prevents forms from having to have that applied where markup is harder to control in certain systems. It still uses the --flow-space variables though to make managing space easier */
form>*+* {
  margin-top: var(--flow-space, 1rem);
}

:is(input, select, textarea) {
  accent-color: var(--color-primary);
}

:is(input:not([type='checkbox'], [type='radio'], [type='color']), select, textarea) {
  padding: 0.5em 0.8em;
  border-radius: var(--radius-s);
  border: var(--form-input-border);
  background: var(--form-input-bg);
  color: var(--color-text);
  width: 100%;

  &::placeholder {
    color: var(--color-text-mid);
    opacity: 1;
  }
}

label {
  line-height: var(--leading-tight);
  font-weight: var(--font-medium);
}

label::after {
  content: '\A';
  white-space: pre;
}

/* Usually label wraps checkbox and radio buttons, so we give ourselves more layout and text-flow control with flex */
label:has(input) {
  display: flex;
  align-items: baseline;
  gap: var(--space-s);
  font-weight: var(--font-normal);
}

label:has(input)+label:has(input) {
  --flow-space: var(--space-s-m);
}

/* Slightly adjusts the vertical position of the check/radio */
label:has(input) input {
  transform: translateY(-0.1ex);
}

input:disabled {
  background: var(--color-text-mid);
}

input:disabled,
label input:disabled+* {
  cursor: not-allowed;
}

/* Sets a sensible height if textarea rows attribute is missing */
textarea:not([rows]) {
  min-height: 10em;
}

fieldset {
  border: var(--stroke);
  padding: var(--space-s);
}

legend {
  font-weight: var(--font-medium);
  padding-inline: var(--space-xs);
}

section {
  margin-block-start: 3rem;
  margin-block-end: 6rem;
}

section[data-big-start-margin] {
  margin-block-start: clamp(var(--space-xl), 20vh, 15rem) !important;
}

main {
  width: var(--content-width);
  margin-inline: auto;
  margin-block-start: var(--space-xl);
  margin-block-end: 0;
}

@media (prefers-reduced-motion: reduce) {

  /* https://www.a11yproject.com/posts/understanding-vestibular-disorders/ */
  *,
  ::before,
  ::after {
    animation-duration: 0.001s !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.001s !important;
  }
}